{"version":3,"file":"static/js/242.7999ecdd.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.tsx","components/ContactForm/ContactForm.tsx","components/Contact/Contact.styled.tsx","components/Contact/Contact.tsx","components/ContactList/ContactList.styled.tsx","components/ContactList/ContactList.tsx","components/Filter/Filter.styled.tsx","components/Filter/Filter.tsx","pages/Contacts.tsx"],"sourcesContent":["import { Form, Field, ErrorMessage } from 'formik';\nimport styled from 'styled-components';\n\nimport { adaptFonts, colors, other } from '../../constants';\nimport { cunsomFonts } from 'utils';\n\nexport const FormMainBox = styled.div`\n  display: inline-flex;\n  flex-direction: column;\n  gap: 40px;\n  padding: 40px 30px;\n\n  background-color: ${colors.white};\n  box-shadow: ${other.boxShadow};\n  border: ${other.border};\n  border-radius: ${other.borderRadius}px;\n`;\n\nexport const H2 = styled.h2`\n  display: inline-block;\n  color: ${colors.txtBlack};\n  ${adaptFonts.md}\n`;\n\nexport const MyForm = styled(Form)`\n  display: inline-flex;\n  flex-direction: column;\n  gap: 20px;\n`;\n\nexport const FormBox = styled.div`\n  position: relative;\n`;\n\nexport const Label = styled.label`\n  display: inline-block;\n  position: absolute;\n  top: 0;\n  left: 5px;\n  pointer-events: none;\n  transition: translate ${other.animation};\n\n  ${cunsomFonts(12, 14, 16)}\n  color: ${colors.txtBlack};\n`;\n\nexport const Input = styled(Field)`\n  padding: 5px 8px;\n  background-color: transparent;\n  border: none;\n  border-bottom: ${other.border};\n\n  ${props => {\n    if (props.value)\n      return `\n    & ~ label {\n      translate: 0 -100%;\n      color: blue;\n    } \n    `;\n  }}\n\n  &:focus ~ label {\n    translate: 0 -100%;\n    color: blue;\n  }\n`;\n\nconst ErrorText = styled.p`\n  ${cunsomFonts(10, 12, 14)}\n  max-width: 200px;\n  color: red;\n`;\n\nexport const Error = ({ name }: { name: string }) => {\n  return (\n    <ErrorMessage\n      name={name}\n      render={message => <ErrorText>{message}</ErrorText>}\n    />\n  );\n};\n\nexport const Button = styled.button`\n  ${cunsomFonts(12, 14, 16)}\n  color: ${colors.txtBlack};\n\n  padding: 10px 15px;\n  background-color: ${colors.generalBackground};\n  border: none;\n  box-shadow: none;\n  transition: box-shadow ${other.animation};\n\n  &:hover,\n  &:focus {\n    box-shadow: ${other.boxShadow};\n  }\n`;\n","import { Formik } from 'formik';\nimport * as yup from 'yup';\n\nimport { addContact } from 'redux/contacts/operations';\nimport { useAppDispatch, useContacts } from 'hooks';\nimport {\n  ERROR,\n  SUCCESS,\n  isInContactsName,\n  isInContactsNumber,\n  myToast,\n} from 'utils';\nimport { phoneRegExp } from '../../constants';\n\nimport {\n  MyForm,\n  FormBox,\n  Label,\n  Input,\n  Error,\n  Button,\n  FormMainBox,\n  H2,\n} from './ContactForm.styled';\nimport { Spinner } from 'components/Other';\n\nimport { IContactValues } from 'types';\n\ninterface IProps {\n  title: string;\n}\n\nexport const ContactForm: React.FC<IProps> = ({ title = 'Add contact' }) => {\n  const dispatch = useAppDispatch();\n  const { isLoading, isError, contacts } = useContacts();\n\n  // const {\n  //   data: contacts,\n  //   isLoading,\n  //   isError,\n  // } = useGetContactsQuery('', {\n  //   pollingInterval: 3000,\n  //   refetchOnMountOrArgChange: true,\n  //   skip: false,\n  // });\n  // const [postContact, { isLoading: isPosting }] = usePostContactMutation();\n\n  const initialValues: IContactValues = {\n    name: '',\n    number: '',\n  };\n\n  const schema = yup.object().shape({\n    name: yup.string().max(50).required(),\n    number: yup\n      .string()\n      .required()\n      .matches(phoneRegExp, 'Phone number is not valid'),\n  });\n\n  if (isLoading) {\n    return (\n      <FormMainBox>\n        <H2>{title}</H2>\n        <Spinner />\n      </FormMainBox>\n    );\n  } else if (isError || !contacts) {\n    return (\n      <FormMainBox>\n        <H2>{title}</H2>Error\n      </FormMainBox>\n    );\n  }\n\n  const handleOnSubmit = async (\n    contact: IContactValues,\n    {\n      resetForm,\n    }: {\n      resetForm: () => void;\n    }\n  ) => {\n    const { name, number } = contact;\n\n    try {\n      if (isInContactsName(contacts, name)) {\n        throw Error({ name: `Name \"${name}\" is already in your contacts` });\n      } else if (isInContactsNumber(contacts, number)) {\n        throw Error({ name: `Number \"${number}\" is already in your contacts` });\n      }\n\n      await dispatch(addContact(contact));\n      myToast('✅ Contact was successfully added', SUCCESS);\n      resetForm();\n    } catch (err: any) {\n      myToast(`❌ We couldn't add your contact, (${err.props?.name})`, ERROR);\n      console.log(err);\n    }\n  };\n\n  return (\n    <FormMainBox>\n      <H2>{title}</H2>\n      <Formik\n        initialValues={initialValues}\n        onSubmit={handleOnSubmit}\n        validationSchema={schema}\n      >\n        {({ values }) => (\n          <MyForm autoComplete=\"off\">\n            <FormBox>\n              <Input name=\"name\" type=\"text\" value={values.name} />\n              <Label htmlFor=\"name\">Name</Label>\n              <Error name=\"name\" />\n            </FormBox>\n            <FormBox>\n              <Input name=\"number\" type=\"tel\" value={values.number} />\n              <Label htmlFor=\"number\">Number</Label>\n              <Error name=\"number\" />\n            </FormBox>\n            <Button type=\"submit\">\n              {/* Тут бажано дізейблити на isPosting */}\n              Add contact\n            </Button>\n          </MyForm>\n        )}\n      </Formik>\n    </FormMainBox>\n  );\n};\n","import { other, colors } from '../../constants';\nimport styled from 'styled-components';\nimport { cunsomFonts } from 'utils';\n\nexport const Li = styled.li`\n  display: flex;\n\n  justify-content: space-between;\n  align-items: center;\n  flex-wrap: wrap;\n  gap: 30px;\n\n  padding: 15px 20px;\n\n  box-shadow: ${other.boxShadow};\n`;\n\nexport const Name = styled.p`\n  display: inline-flex;\n  align-items: center;\n  gap: 8px;\n\n  width: 200px;\n\n  overflow: hidden;\n`;\n\nexport const Number = styled.p`\n  display: inline-flex;\n  align-items: center;\n  gap: 8px;\n\n  width: 200px;\n\n  overflow: hidden;\n`;\n\nexport const Date = styled.p`\n  display: inline-flex;\n  align-items: center;\n  gap: 8px;\n\n  width: 130px;\n  ${cunsomFonts(8, 10, 12)}\n\n  overflow: hidden;\n`;\n\nexport const Button = styled.button`\n  display: inline-flex;\n  align-items: center;\n  gap: 15px;\n  padding: 8px 15px;\n  aspect-ratio: 1 / 1;\n\n  ${cunsomFonts(12, 14, 16)}\n  color: ${colors.txtBlack};\n\n  background-color: ${colors.generalBackground};\n  border-radius: 50%;\n  border: none;\n  box-shadow: none;\n  transition: box-shadow ${other.animation};\n\n  &:hover,\n  &:focus {\n    box-shadow: ${other.boxShadow};\n  }\n`;\n","import { deleteContact } from 'redux/contacts/operations';\nimport { useAppDispatch } from 'hooks';\n\nimport { Li, Name, Number, Button } from './Contact.styled';\nimport { RxAvatar, RxMobile, RxCross1 } from 'react-icons/rx';\n\nimport { IContact } from 'types';\nimport { ERROR, SUCCESS, myToast } from 'utils';\n\ninterface IPops {\n  contact: IContact;\n}\n\nexport const Contact: React.FC<IPops> = ({ contact }) => {\n  const { id, name, number } = contact;\n  const dispatch = useAppDispatch();\n\n  const handleOnDelete = async (id: string) => {\n    try {\n      await dispatch(deleteContact(id));\n      myToast('✅ Contact was deleted successfully', SUCCESS);\n    } catch (err: any) {\n      console.log(err);\n      myToast(\"❌ Contact wasn't deleted sucessfully\", ERROR);\n    }\n  };\n\n  return (\n    <Li>\n      <Name>\n        <RxAvatar />\n        {name}\n      </Name>\n      <Number>\n        <RxMobile size={20} />\n        {number}\n      </Number>\n      <Button type=\"button\" onClick={() => handleOnDelete(id)}>\n        {/* Тут бажано дізейблити на деліт */}\n        <RxCross1 />\n      </Button>\n    </Li>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Ul = styled.ul`\n  display: inline-flex;\n  flex-direction: column;\n  gap: 20px;\n  padding: 30px 40px;\n\n  margin-top: 35px;\n`;\n","import { useMemo } from 'react';\n\nimport { Contact } from 'components/Contact/Contact';\nimport { Ul } from './ContactList.styled';\nimport { Spinner } from 'components/Other';\n\nimport { checkOnInclude } from 'utils';\nimport { useContacts } from 'hooks';\n\nimport { IContact } from 'types';\n\ninterface IProps {\n  filterValue: string;\n}\n\nexport const ContactList: React.FC<IProps> = ({ filterValue }) => {\n  const { isLoading, isError, contacts } = useContacts();\n\n  // const {\n  //   data: contacts,\n  //   isLoading,\n  //   isError,\n  // } = useGetContactsQuery('', {\n  //   pollingInterval: 3000,\n  //   refetchOnMountOrArgChange: true,\n  //   skip: false,\n  // });\n  // const [deleteContact, { isLoading: isDeleting }] = useDeleteContactMutation();\n\n  const filteredContacts = useMemo(() => {\n    return !filterValue\n      ? contacts!\n      : contacts!.filter(\n          ({ name, number }) =>\n            checkOnInclude(name, filterValue) ||\n            checkOnInclude(number, filterValue)\n        );\n  }, [contacts, filterValue]);\n\n  if (isLoading) {\n    return (\n      <Ul>\n        <Spinner />\n      </Ul>\n    );\n  } else if (isError || !contacts) {\n    return <Ul>Error</Ul>;\n  }\n\n  return (\n    <div>\n      <Ul>\n        {filteredContacts.map((contact: IContact) => (\n          <Contact key={contact.id} contact={contact} />\n        ))}\n      </Ul>\n    </div>\n  );\n};\n","import styled from 'styled-components';\n\nimport { colors, adaptFonts, other } from '../../constants';\nimport { cunsomFonts } from 'utils';\n\nexport const FilterBox = styled.div`\n  display: inline-flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 40px;\n`;\n\nexport const H2 = styled.h2`\n  display: inline-block;\n  color: ${colors.txtBlack};\n  ${adaptFonts.md}\n`;\n\nexport const InputBox = styled.div`\n  display: inline-flex;\n  align-items: center;\n  gap: 20px;\n  position: relative;\n\n  border: none;\n  border-bottom: ${other.border};\n`;\n\nexport const Input = styled.input`\n  padding: 5px 8px;\n  background-color: transparent;\n  border: none;\n\n  ${props => {\n    if (props.value)\n      return `\n    & ~ label {\n      translate: 0 -100%;\n      color: blue;\n    } \n    `;\n  }}\n\n  &:focus ~ label {\n    translate: 0 -100%;\n    color: blue;\n  }\n`;\n\nexport const Label = styled.label`\n  display: inline-block;\n  position: absolute;\n  top: 0;\n  left: 5px;\n  pointer-events: none;\n  transition: translate ${other.animation};\n\n  ${cunsomFonts(12, 14, 16)}\n  color: ${colors.txtBlack};\n`;\n","import { BsSearch } from 'react-icons/bs';\nimport { FilterBox, H2, InputBox, Input, Label } from './Filter.styled';\n\ninterface IProps {\n  title: string;\n  value: string;\n  handleOnChange: (value: string) => void;\n}\n\nexport const Filter: React.FC<IProps> = ({\n  title = 'Contacts',\n  value,\n  handleOnChange,\n}) => {\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.target;\n    handleOnChange(value);\n  };\n\n  return (\n    <FilterBox>\n      <H2>{title}</H2>\n      <InputBox>\n        <Input name=\"filter\" type=\"text\" onChange={onChange} value={value} />\n        <BsSearch />\n        <Label htmlFor=\"filter\">Find contacts by name</Label>\n      </InputBox>\n    </FilterBox>\n  );\n};\n","import { useEffect, useState } from 'react';\n\nimport { AppBox, Section, FlexBox, RightBox } from 'components/Other';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\n\nimport { BsFillTelephoneFill } from 'react-icons/bs';\nimport { useAppDispatch } from 'hooks';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { ERROR, myToast } from 'utils';\n\nconst Contacts: React.FC = () => {\n  const [filterValue, setFilterValue] = useState<string>('');\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    const dispatchContacts = async () => {\n      try {\n        await dispatch(fetchContacts());\n      } catch (err: any) {\n        console.log(err);\n        myToast(\"❌ We didn't get your contacts\", ERROR);\n      }\n    };\n\n    dispatchContacts();\n  }, [dispatch]);\n\n  const handleOnFilterChange = (value: string) => {\n    setFilterValue(value);\n  };\n\n  return (\n    <AppBox>\n      <Section title=\"Phonebook\" icon={<BsFillTelephoneFill />}>\n        <FlexBox>\n          <ContactForm title=\"Add contact\" />\n\n          <RightBox>\n            <Filter\n              title=\"Contacts\"\n              value={filterValue}\n              handleOnChange={handleOnFilterChange}\n            />\n            <ContactList filterValue={filterValue} />\n          </RightBox>\n        </FlexBox>\n      </Section>\n    </AppBox>\n  );\n};\n\nexport default Contacts;\n"],"names":["FormMainBox","styled","colors","other","H2","adaptFonts","MyForm","Form","FormBox","Label","cunsomFonts","Input","Field","props","value","ErrorText","Error","name","render","message","Button","ContactForm","title","dispatch","useAppDispatch","useContacts","isLoading","isError","contacts","schema","yup","shape","max","required","number","matches","phoneRegExp","handleOnSubmit","contact","resetForm","isInContactsName","isInContactsNumber","addContact","myToast","SUCCESS","ERROR","console","log","initialValues","onSubmit","validationSchema","values","autoComplete","type","htmlFor","Li","Name","Number","Contact","id","handleOnDelete","deleteContact","size","onClick","Ul","ContactList","filterValue","filteredContacts","useMemo","filter","checkOnInclude","map","FilterBox","InputBox","Filter","handleOnChange","onChange","e","target","useState","setFilterValue","useEffect","dispatchContacts","fetchContacts","icon"],"sourceRoot":""}